#include <Servo.h>

Servo servoL;
Servo servoR;

void setup(){
  Serial.begin(9600);
  servoL.attach(13);
  servoR.attach(12);

void loop(){
    DDRD |= B11110000;                         // Set direction of Arduino pins D4-D7 as OUTPUT
    PORTD |= B11110000;                        // Set level of Arduino pins D4-D7 to HIGH
    delayMicroseconds(230);                    // Short delay to allow capacitor charge in QTI module
    DDRD &= B00001111;                         // Set direction of pins D4-D7 as INPUT
    PORTD &= B00001111;                        // Set level of pins D4-D7 to LOW
    delayMicroseconds(230);                    // Short delay
    int pins = PIND;                           // Get values of pins D0-D7
    pins >>= 4;                                // Drop off first four bits of the port; keep only pins D4-D7

    Serial.println(pins, BIN);                 // Display result of D4-D7 pins in Serial Monitor
}
  
    servoL.writeMicroseconds(1500 + vL);      // Steer robot to recenter it over the line
    servoR.writeMicroseconds(1500 - vR);
  
    delay(50);                                // Delay for 50 milliseconds (1/20 second)
}
void lineAvoiding(){
    DDRD |= B11110000;                         // Set direction of Arduino pins D4-D7 as OUTPUT
    PORTD |= B11110000;                        // Set level of Arduino pins D4-D7 to HIGH
    delayMicroseconds(230);                    // Short delay to allow capacitor charge in QTI module
    DDRD &= B00001111;                         // Set direction of pins D4-D7 as INPUT
    PORTD &= B00001111;                        // Set level of pins D4-D7 to LOW
    delayMicroseconds(230);                    // Short delay
    int pins = PIND;                           // Get values of pins D0-D7
    pins >>= 4;                                // Drop off first four bits of the port; keep only pins D4-D7
  
    Serial.println(pins, BIN);                 // Display result of D4-D7 pins in Serial Monitor
  
    // Determine how to steer based on state of the four QTI sensors
    int vL, vR;
    switch(pins){                               // Compare pins to known line following states
      case B0000:                        
      vL = -100;
      vR = -100;
      break;
    case B0001:                        
      vL = -100;                             // -100 to 100 indicate course correction values
      vR = 100;                              // -100: full reverse; 0=stopped; 100=full forward
      break;
    case B0011:                        
      vL = -100;
      vR = 100;
      break;    
    case B1100:                        
      vL = 100;
      vR = -100;
      break;
    case B1110:                        
      vL = 100;
      vR = -100;
      break;
    }
    servoL.writeMicroseconds(1500 - vL);      // Steer robot to recenter it over the line
    servoR.writeMicroseconds(1500 + vR);
    delay(50);
}
